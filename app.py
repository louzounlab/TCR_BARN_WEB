import datetime
import secrets
import os
from os.path import join
from flask import Flask, render_template, request, jsonify
import time
import shutil
import pandas as pd
import tcrbarn
import scipy.stats as stats
import importlib


module_path = "./tcrbarn/main.py"
module_name = "tcrbarn"
spec = importlib.util.spec_from_file_location(module_name, module_path)
tcr_model = importlib.util.module_from_spec(spec)
spec.loader.exec_module(tcr_model)

# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()

# # Load the models once
# models_names = ["model_xgboost_day2.pkl", "model_xgboost_day7.pkl", "model_xgboost_day34.pkl"]
# loaded_models = []
# for model_name in models_names:
#     with open(join("models", model_name), "rb") as file:
#         model = pickle.load(file)
#         loaded_models.append(model)


def clean_old_files():
    files = os.listdir("static")
    for file in files:
        if os.path.isdir(join("static", file)) and file != "bootstrap":
            # Time is older than an hour
            if time.time() - float(file) > 3600:
                shutil.rmtree(join("static", file))
                print("Deleted:", file)


@app.route('/process_form', methods=['POST', 'GET'])
def process_form():
    try:
        # Get the form data
        data = request.form
        # Extract and validate form data
        tcra = data.get("tcra")
        if not tcra:
            raise ValueError("Missing required field: tcra")

        va = data.get("va")
        if not va:
            raise ValueError("Missing required field: va")
        tcr_model.validate_tr_prefix(va, "TRAV")

        ja = data.get("ja")
        if not ja:
            raise ValueError("Missing required field: ja")
        tcr_model.validate_tr_prefix(ja, "TRAJ")

        tcrb = data.get("tcrb")
        if not tcrb:
            raise ValueError("Missing required field: tcrb")

        vb = data.get("vb")
        if not vb:
            raise ValueError("Missing required field: vb")
        tcr_model.validate_tr_prefix(vb, "TRBV")

        jb = data.get("jb")
        if not jb:
            raise ValueError("Missing required field: jb")
        tcr_model.validate_tr_prefix(jb, "TRBJ")

        data_type = data.get("data_type")
        if not data_type:
            raise ValueError("Missing required field: Type of data")

        input_pair = [[tcra, va, ja], [tcrb, vb, jb]]
        # Determine the model type based on the data type
        if data_type == "All T cells":
            model_of = "ireceptor"
        else:
            model_of = "vdjdb"
            # Predict the base output using the iReceptor model
            base_output = tcr_model.predict(input_pair, "ireceptor").item()
            input_pair.append(base_output)
        # Predict the final output using the determined model
        output = tcr_model.predict(input_pair, model_of).item()
        output = round(output, 3)
        model_output = []
        model_output.append(output)
        if data_type == "All T cells":
            df = pd.read_csv("probs_and_labels_test_set.csv")

            # Function to compute the percentile of a new probability X
            def get_percentile(X, df):
                percentile = stats.percentileofscore(df["prob"], X, kind='rank')
                return percentile
            percentile = get_percentile(output, df)
            percentile = round(percentile, 3)
            model_output.append(percentile)

        return render_template("index.html", active="Home", model_output=model_output)
    except Exception as e:
        return render_template("index.html", active="Home", model_output=[], error=str(e))


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    return render_template("index.html", active="Home", model_output=None)


@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html", active="Example")


@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html", active="About")



if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
